{"pageProps":{"post":{"attributes":{"title":"What is TypeScript","description":"What is TypeScript"},"html":"<h2 id=\"1-goal-for-this-course\">#1 Goal for this course</h2>\n<p>By the end of this course, <strong>I want you to have a rock solid mental model, that will serve you well for years.</strong></p>\n<br>\n\n<h2 id=\"what-is-typescript\">What is TypeScript?</h2>\n<p>TypeScript is an open source, typed <strong>syntactic superset</strong> of JavaScript</p>\n<ul>\n<li>Compiles to readable JS</li>\n<li>Three parts: Language, Language Server and Compiler</li>\n<li>Kind of like a fancy linter</li>\n</ul>\n<br>\n\n<h2 id=\"typescript-is-increasingly-popular\">Typescript Is Increasingly Popular</h2>\n<p><img src=\"/ts-course/./images/graph.png\" alt=\"TypeScript Popularity\"></p>\n<br>\n\n<h2 id=\"why-developers-want-types\">Why developers want types</h2>\n<p>It allows you, as a code author, <strong>to leave more of your intent “on the page”</strong></p>\n<br>\n\n<p>This kind of intent is often missing from JS code. For example:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">a, b</span>) {\n  <span class=\"hljs-keyword\">return</span> a + b\n}\n</code></pre>\n<p>Is this meant to take numbers as args? strings? both?</p>\n<br>\n\n<p>What if someone who interpreted a and b as numbers made this “backwards-compatible change?”</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">a, b, c = <span class=\"hljs-number\">0</span></span>) {\n  <span class=\"hljs-keyword\">return</span> a + b + c\n}\n</code></pre>\n<p>We’re headed for trouble if we decided to pass strings in for a and b!</p>\n<br/>\n\n\n<p>Types make the author’s intent more clear</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">number</span>, b: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-built_in\">number</span> {\n  <span class=\"hljs-keyword\">return</span> a + b\n}\n<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&quot;4&quot;</span>)\n</code></pre>\n<h3 id=\"it-has-the-potential-to-move-some-kinds-of-errors-from-runtime-to-compile-time\"><strong>It has the potential to move some kinds of errors from runtime to compile time</strong></h3>\n<br>\n\n<p><strong>Examples:</strong></p>\n<ul>\n<li>Values that are potentially absent (null or undefined)</li>\n<li>Incomplete refactoring</li>\n<li>Breakage around internal code contracts (e.g., an argument becomes required)</li>\n</ul>\n<br>\n\n<h3 id=\"it-serves-as-the-foundation-for-a-great-code-authoring-experience\"><strong>It serves as the foundation for a great code authoring experience</strong></h3>\n<br>\n\n<p><strong>Example:</strong> in-editor autocomplete,</p>\n","markdown":"\n\n## #1 Goal for this course\n\nBy the end of this course, **I want you to have a rock solid mental model, that will serve you well for years.**\n\n\n<br>\n\n## What is TypeScript?\nTypeScript is an open source, typed **syntactic superset** of JavaScript\n+ Compiles to readable JS\n+ Three parts: Language, Language Server and Compiler\n+ Kind of like a fancy linter\n\n<br>\n\n## Typescript Is Increasingly Popular\n![TypeScript Popularity](./images/graph.png)\n\n\n<br>\n\n## Why developers want types\n\nIt allows you, as a code author, **to leave more of your intent “on the page”**\n\n<br>\n\nThis kind of intent is often missing from JS code. For example:\n\n```js\nfunction add(a, b) {\n  return a + b\n}\n```\n\nIs this meant to take numbers as args? strings? both?\n\n<br>\n\nWhat if someone who interpreted a and b as numbers made this “backwards-compatible change?”\n\n\n```js\nfunction add(a, b, c = 0) {\n  return a + b + c\n}\n```\n\n\nWe’re headed for trouble if we decided to pass strings in for a and b!\n\n<br/>\n\n\nTypes make the author’s intent more clear\n\n\n```ts\nfunction add(a: number, b: number): number {\n  return a + b\n}\nadd(3, \"4\")\n```\n\n### **It has the potential to move some kinds of errors from runtime to compile time**\n\n<br>\n\n**Examples:**\n\n+ Values that are potentially absent (null or undefined)\n+ Incomplete refactoring\n+ Breakage around internal code contracts (e.g., an argument becomes required)\n\n<br>\n\n### **It serves as the foundation for a great code authoring experience**\n\n<br>\n\n**Example:** in-editor autocomplete,\n\n","slug":"what-is-ts","title":"What is TypeScript","section":"Intro","icon":"info-circle","filePath":"/home/runner/work/ts-course/ts-course/lessons/01-Intro/B-what-is-ts.md","nextSlug":"/ts-course/lessons/Setup/hello-typescript","prevSlug":"/ts-course/lessons/Intro/intro"}},"__N_SSG":true}