{"pageProps":{"post":{"attributes":{"title":"Hello TypeScript","description":"Setting up TypeScript"},"html":"<h1 id=\"hello-typescript\">Hello TypeScript</h1>\n<h2 id=\"anatomy-of-the-project\">Anatomy of the project</h2>\n<p>Let’s consider a very simple TypeScript project that consists of only three files:</p>\n<pre><code class=\"hljs language-python\">package.json   <span class=\"hljs-comment\"># Package manifest</span>\ntsconfig.json  <span class=\"hljs-comment\"># TypeScript compiler settings</span>\nsrc/index.ts   <span class=\"hljs-comment\"># &quot;the program&quot;</span>\n</code></pre>\n<p>package.json </p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;hello-ts&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;license&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;NOLICENSE&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;devDependencies&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;typescript&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^4.3.2&quot;</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;scripts&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;dev&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;tsc --watch --preserveWatchOutput&quot;</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>Note that…</p>\n<ul>\n<li>We just have one dependency in our package.json: typescript.</li>\n<li>We have a dev script (this is what runs when you invoke yarn dev-hello-ts from the project root)</li>\n</ul>\n<br>\n\n<ul>\n<li>It runs the TypeScript compiler in “watch” mode (watches for source changes, and rebuilds automatically).</li>\n</ul>\n<br>\n\n\n<p>The following is just about the simplest possible config file for the TS compiler:\ntsconfig.json</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;compilerOptions&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;outDir&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;dist&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-comment\">// where to put the TS files</span>\n    <span class=\"hljs-attr\">&quot;target&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ES3&quot;</span> <span class=\"hljs-comment\">// which level of JS support to target</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;include&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">&quot;src&quot;</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-comment\">// which files to compile</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>All of these things could be specified on the command line (e.g., tsc --outDir dist), but particularly as things get increasingly complicated, we’ll benefit a lot from having this config file:</p>\n<br>\n\n<p>Finally, we have a relatively simple and pointless TypeScript program. It does have <strong>a few interesting things in it that should make changes to the &quot;target&quot; property in our tsconfig.json more obvious</strong>:</p>\n<ul>\n<li>Use of a built in Promise constructor (introduced in ES2015)</li>\n<li>Use of async and await (introduced in ES2017)</li>\n</ul>\n<p>Here is the original (TypeScript) source code that we aim to compile:</p>\n<p>src/index.ts</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">/**\n * Create a promise that resolves after some time\n * <span class=\"hljs-doctag\">@param</span> n number of milliseconds before promise resolves\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">timeout</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">number</span></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> <span class=\"hljs-built_in\">setTimeout</span>(res, n))\n}\n \n<span class=\"hljs-comment\">/**\n * Add three numbers\n * <span class=\"hljs-doctag\">@param</span> a first number\n * <span class=\"hljs-doctag\">@param</span> b second\n */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">addNumbers</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">number</span>, b: <span class=\"hljs-built_in\">number</span></span>) {\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">timeout</span>(<span class=\"hljs-number\">500</span>)\n  <span class=\"hljs-keyword\">return</span> a + b\n}\n \n<span class=\"hljs-comment\">//== Run the program ==//</span>\n;(<span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">addNumbers</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>))\n})()\n</code></pre>\n<h2 id=\"running-the-compiler\">Running the compiler</h2>\n<pre><code class=\"hljs language-bash\">npm run dev\n</code></pre>\n<p>You should see something in your terminal like:</p>\n<pre><code>12:01:57 PM - Starting compilation in watch mode...\n</code></pre>\n<h2 id=\"changing-target-language-level\">Changing target language level</h2>\n<p>If we go to hello-ts/tsconfig.json and change the “compilerOptions.target” property:</p>\n<pre><code class=\"hljs language-diff\">{\n    &quot;compilerOptions&quot;: {\n        &quot;outDir&quot;: &quot;dist&quot;,\n<span class=\"hljs-deletion\">-       &quot;target&quot;: &quot;ES3&quot;</span>\n<span class=\"hljs-addition\">+       &quot;target&quot;: &quot;ES2015&quot;</span>\n    },\n    &quot;include&quot;: [&quot;src&quot;]\n}\n</code></pre>\n<h2 id=\"types-of-modules\">Types of modules</h2>\n<p>Did you notice that the export keyword was still present in the build output for our program? We are generating ES2015 modules from our TypeScript source.</p>\n<p>If you tried to run this file with node like this:</p>\n<pre><code>node packages/hello-ts/dist/index.js\n</code></pre>\n<p>There’s an error!</p>\n<p>Node expects CommonJS modules 1, so we’ll have to tell TypeScript to output this kind of code.</p>\n<p>Let’s add a new property to our tsconfig file:</p>\n<pre><code class=\"hljs language-diff\">&quot;compilerOptions&quot;: {\n    &quot;outDir&quot;: &quot;dist&quot;,\n<span class=\"hljs-addition\">+   &quot;module&quot;: &quot;CommonJS&quot;,</span>\n</code></pre>\n<p>Look at your packages/hello-ts/dist/index.js one more time now. You should see that the way the addNumbers function is exported has changed:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">addNumbers</span> = addNumbers\n</code></pre>\n<p>This is an indication that we’re emitting CommonJS modules! We could try running this program with node one more time:</p>\n<pre><code class=\"hljs language-bash\">node packages/hello-ts/dist/index.js\n</code></pre>\n<p>If the program works correctly at this point, we should see it pause for a short time and then print 7 to the console, before ending successfully.</p>\n","markdown":"\n# Hello TypeScript\n\n## Anatomy of the project\n\nLet’s consider a very simple TypeScript project that consists of only three files:\n```python\npackage.json   # Package manifest\ntsconfig.json  # TypeScript compiler settings\nsrc/index.ts   # \"the program\"\n```\n\npackage.json \n```json\n{\n  \"name\": \"hello-ts\",\n  \"license\": \"NOLICENSE\",\n  \"devDependencies\": {\n    \"typescript\": \"^4.3.2\"\n  },\n  \"scripts\": {\n    \"dev\": \"tsc --watch --preserveWatchOutput\"\n  }\n}\n```\n\nNote that…\n\n+ We just have one dependency in our package.json: typescript.\n+ We have a dev script (this is what runs when you invoke yarn dev-hello-ts from the project root)\n\n<br>\n\n+ It runs the TypeScript compiler in “watch” mode (watches for source changes, and rebuilds automatically).\n\n<br>\n\n\nThe following is just about the simplest possible config file for the TS compiler:\ntsconfig.json\n```json\n{\n  \"compilerOptions\": {\n    \"outDir\": \"dist\", // where to put the TS files\n    \"target\": \"ES3\" // which level of JS support to target\n  },\n  \"include\": [\"src\"] // which files to compile\n}\n```\n\nAll of these things could be specified on the command line (e.g., tsc --outDir dist), but particularly as things get increasingly complicated, we’ll benefit a lot from having this config file:\n\n<br>\n\nFinally, we have a relatively simple and pointless TypeScript program. It does have **a few interesting things in it that should make changes to the \"target\" property in our tsconfig.json more obvious**:\n\n+ Use of a built in Promise constructor (introduced in ES2015)\n+ Use of async and await (introduced in ES2017)\n\n\nHere is the original (TypeScript) source code that we aim to compile:\n\nsrc/index.ts\n\n```ts\n/**\n * Create a promise that resolves after some time\n * @param n number of milliseconds before promise resolves\n */\nfunction timeout(n: number) {\n  return new Promise((res) => setTimeout(res, n))\n}\n \n/**\n * Add three numbers\n * @param a first number\n * @param b second\n */\nexport async function addNumbers(a: number, b: number) {\n  await timeout(500)\n  return a + b\n}\n \n//== Run the program ==//\n;(async () => {\n  console.log(await addNumbers(3, 4))\n})()\n```\n\n## Running the compiler\n\n```bash\nnpm run dev\n```\n\nYou should see something in your terminal like:\n```\n12:01:57 PM - Starting compilation in watch mode...\n```\n\n## Changing target language level\nIf we go to hello-ts/tsconfig.json and change the “compilerOptions.target” property:\n\n```diff\n{\n    \"compilerOptions\": {\n        \"outDir\": \"dist\",\n-       \"target\": \"ES3\"\n+       \"target\": \"ES2015\"\n    },\n    \"include\": [\"src\"]\n}\n```\n\n\n## Types of modules\nDid you notice that the export keyword was still present in the build output for our program? We are generating ES2015 modules from our TypeScript source.\n\nIf you tried to run this file with node like this:\n```\nnode packages/hello-ts/dist/index.js\n```\nThere’s an error!\n\nNode expects CommonJS modules 1, so we’ll have to tell TypeScript to output this kind of code.\n\nLet’s add a new property to our tsconfig file:\n```diff\n\"compilerOptions\": {\n    \"outDir\": \"dist\",\n+   \"module\": \"CommonJS\",\n```\n\nLook at your packages/hello-ts/dist/index.js one more time now. You should see that the way the addNumbers function is exported has changed:\n\n```js\nexports.addNumbers = addNumbers\n```\n\nThis is an indication that we’re emitting CommonJS modules! We could try running this program with node one more time:\n\n```bash\nnode packages/hello-ts/dist/index.js\n```\n\nIf the program works correctly at this point, we should see it pause for a short time and then print 7 to the console, before ending successfully.","slug":"hello-typescript","title":"Hello TypeScript","section":"Setup","icon":"dumpster-fire","filePath":"/home/runner/work/ts-course/ts-course/lessons/02-Setup/A-hello-typescript.md","nextSlug":"/ts-course/lessons/TypeScript-Language/Variables-Values","prevSlug":"/ts-course/lessons/Intro/what-is-ts"}},"__N_SSG":true}